//Workshop 2 reflection
//Name   : chinganshih
//ID     : 148221195
//Email  : cshih9@myseneca.ca
//Section: OOP244 NMM

For Workshop 2, the most difficult part is to understand what dynamic memory. Dynamic memory can let us design our program more flexible and more reusable, for this purpose, we need to allocate and deallocate memory dynamically. For lab・s part, we should consider allocating dynamic memory for the array of Car element to read hundreds of data. Firstly, I create a Car pointer in the beginner to store elements, and check whether the array is full or not. If it・s full, increase the memory of Car. By doing this, we won・t waste our memory. To avoid memory leak, we must deallocate dynamic memory. While implementing deallocation, I・ve learnt that we should deallocate each element of char pointer instead of just deallocate whole Car pointer. When I only deallocate Car pointer (delete[] car), it will still cause memory leak because car.makeModel hasn・t been deallocated. Through this practice, we should ensure each pointer in the structure has been deallocated as well and deallocate whole the array pointer and set it to nullptr to avoid ：Memory leak；.      
